{
  "_args": [
    [
      {
        "raw": "http-auth@^3.1.3",
        "scope": null,
        "escapedName": "http-auth",
        "name": "http-auth",
        "rawSpec": "^3.1.3",
        "spec": ">=3.1.3 <4.0.0",
        "type": "range"
      },
      "/Users/nardos/Documents/sdk-express"
    ]
  ],
  "_from": "http-auth@>=3.1.3 <4.0.0",
  "_id": "http-auth@3.2.3",
  "_inCache": true,
  "_location": "/http-auth",
  "_nodeVersion": "7.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/http-auth-3.2.3.tgz_1499534391918_0.6100317351520061"
  },
  "_npmUser": {
    "name": "gevorg",
    "email": "gevorg.ha@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "http-auth@^3.1.3",
    "scope": null,
    "escapedName": "http-auth",
    "name": "http-auth",
    "rawSpec": "^3.1.3",
    "spec": ">=3.1.3 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/http-auth/-/http-auth-3.2.3.tgz",
  "_shasum": "636842b71d6e1f2c98dba09af54417a1fef8b61c",
  "_shrinkwrap": null,
  "_spec": "http-auth@^3.1.3",
  "_where": "/Users/nardos/Documents/sdk-express",
  "author": {
    "name": "Gevorg Harutyunyan",
    "url": "http://github.com/gevorg"
  },
  "bugs": {
    "url": "http://github.com/http-auth/http-auth/issues"
  },
  "dependencies": {
    "apache-crypt": "^1.1.2",
    "apache-md5": "^1.0.6",
    "bcryptjs": "^2.3.0",
    "uuid": "^3.0.0"
  },
  "description": "Node.js package for HTTP basic and digest access authentication.",
  "devDependencies": {
    "chai": "^3.5.0",
    "express": "^4.13.4",
    "hapi": "^15.0.3",
    "http-proxy": "^1.13.3",
    "koa": "^1.2.0",
    "mocha": "^3.1.2",
    "passport": "^0.3.2",
    "request": "^2.72.0"
  },
  "directories": {},
  "dist": {
    "shasum": "636842b71d6e1f2c98dba09af54417a1fef8b61c",
    "tarball": "https://registry.npmjs.org/http-auth/-/http-auth-3.2.3.tgz"
  },
  "engines": {
    "node": ">=4.6.1"
  },
  "gitHead": "d2e2cb013c9e830f23aba392a50c2527f9bb49de",
  "homepage": "http://http-auth.info",
  "keywords": [
    "http",
    "basic",
    "digest",
    "access",
    "authentication"
  ],
  "license": "MIT",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/http-auth/http-auth/blob/master/LICENSE"
    }
  ],
  "main": "./src/http-auth.js",
  "maintainers": [
    {
      "name": "gevorg",
      "email": "gevorg.ha@gmail.com"
    }
  ],
  "name": "http-auth",
  "optionalDependencies": {},
  "readme": "# http-auth\r\n[Node.js](http://nodejs.org/) package for HTTP basic and digest access authentication.\r\n\r\n[![Build Status](https://api.travis-ci.org/http-auth/http-auth.png)](https://travis-ci.org/http-auth/http-auth)\r\n\r\n## Installation\r\n\r\nVia git (or downloaded tarball):\r\n\r\n```bash\r\n$ git clone git://github.com/http-auth/http-auth.git\r\n```\r\nVia [npm](http://npmjs.org/):\r\n\r\n```bash\r\n$ npm install http-auth\r\n```\t\r\n\r\n## Basic example\r\n```javascript\r\n// Authentication module.\r\nvar auth = require('http-auth');\r\nvar basic = auth.basic({\r\n\trealm: \"Simon Area.\",\r\n\tfile: __dirname + \"/../data/users.htpasswd\"\r\n});\r\n\r\n// Creating new HTTP server.\r\nhttp.createServer(basic, (req, res) => {\r\n\tres.end(`Welcome to private area - ${req.user}!`);\r\n}).listen(1337);\r\n\r\n```\r\n## Custom authentication\r\n```javascript\t\r\n// Authentication module.\r\nvar auth = require('http-auth');\r\nvar basic = auth.basic({\r\n\t\trealm: \"Simon Area.\"\r\n\t}, (username, password, callback) => { \r\n\t    // Custom authentication\r\n\t    // Use callback(error) if you want to throw async error.\r\n\t\tcallback(username === \"Tina\" && password === \"Bullock\");\r\n\t}\r\n);\r\n\r\n// Creating new HTTP server.\r\nhttp.createServer(basic, (req, res) => {\r\n\tres.end(`Welcome to private area - ${req.user}!`);\r\n}).listen(1337);\r\n```\r\n\r\n## [express framework](http://expressjs.com/) integration\r\n```javascript\r\n// Authentication module.\r\nvar auth = require('http-auth');\r\nvar basic = auth.basic({\r\n\trealm: \"Simon Area.\",\r\n\tfile: __dirname + \"/../data/users.htpasswd\"\r\n});\r\n\r\n// Application setup.\r\nvar app = express();\r\napp.use(auth.connect(basic));\r\n\r\n// Setup route.\r\napp.get('/', (req, res) => {\r\n    res.send(`Hello from express - ${req.user}!`);\r\n});\r\n```\r\n\r\n## [koa framework](http://koajs.com/) integration\r\n```javascript\r\n// Authentication module.\r\nvar auth = require('http-auth');\r\nvar basic = auth.basic({\r\n    realm: \"Simon Area.\",\r\n    file: __dirname + \"/../data/users.htpasswd\"\r\n});\r\n\r\n// Final handler.\r\napp.use(function *(next) {\r\n    yield next;\r\n    this.body = `Hello from koa - ${this.req.user}!`;\r\n});\r\n\r\n// Enable auth.\r\napp.use(auth.koa(basic));\r\n```\r\n\r\n## For [koa@next](https://github.com/koajs/koa/tree/v2.x) you can use [http-auth-koa](https://github.com/http-auth/http-auth-koa)\r\n```javascript\r\n// Authentication module.\r\nimport auth from 'http-auth'\r\nimport koaAuth from 'http-auth-koa'\r\nconst basic = auth.basic({\r\n    realm: \"Simon Area.\",\r\n    file: __dirname + \"/../data/users.htpasswd\"\r\n});\r\n\r\n// Koa setup.\r\nimport Koa from 'koa'\r\nconst app = new Koa();\r\n\r\n// Setup basic handler.\r\napp.use(async (ctx, next) => {\r\n    await next();\r\n    ctx.body = `Welcome to koa ${ctx.req.user}!`;\r\n});\r\n\r\n// Setup auth.\r\napp.use(koaAuth(basic));\r\n```\r\n\r\n## [hapi framework](http://hapijs.com/) integration\r\n```javascript\r\n// Authentication module.\r\nconst auth = require('http-auth');\r\n\r\n// Setup auth.\r\nconst basic = auth.basic({\r\n    realm: \"Simon Area.\",\r\n    file: __dirname + \"/../data/users.htpasswd\"\r\n});\r\n\r\n// Create server.\r\nconst server = new Hapi.Server();\r\nserver.connection({ port: 1337 });\r\n\r\n// Register auth plugin.\r\nserver.register(auth.hapi());\r\n\r\n// Setup strategy.\r\nserver.auth.strategy('http-auth', 'http', basic);\r\n\r\n// Setup route.\r\nserver.route({\r\n    method: 'GET',\r\n    path: '/',\r\n    config: {\r\n        auth: 'http-auth',\r\n        handler: (request, reply) => {\r\n            reply(`Welcome from Hapi - ${request.auth.credentials.name}!`);\r\n        }\r\n    }\r\n});\r\n```\r\n\r\n## Protecting specific path\r\n```javascript\r\n// Authentication module.\r\nvar auth = require('http-auth');\r\nvar basic = auth.basic({\r\n\trealm: \"Simon Area.\",\r\n\tfile: __dirname + \"/../data/users.htpasswd\"\r\n});\r\n\r\n// Application setup.\r\nvar app = express();\r\n\r\n// Setup route.\r\napp.get('/admin', auth.connect(basic), (req, res) => {\r\n    res.send(`Hello from admin area - ${req.user}!`);\r\n});\r\n\r\n// Setup route.\r\napp.get('/', (req, res) => {\r\n    res.send(\"Not protected area!\");\r\n});\r\n```\r\n\r\n## [passport](http://passportjs.org/) integration\r\n```javascript\r\n// Authentication module.\r\nvar auth = require('http-auth');\r\nvar basic = auth.basic({\r\n\trealm: \"Simon Area.\",\r\n\tfile: __dirname + \"/../data/users.htpasswd\"\r\n});\r\n\r\n// Application setup.\r\nvar app = express();\r\n\r\n// Setup strategy.\r\nvar passport = require('passport');\r\npassport.use(auth.passport(basic));\r\n\r\n// Setup route.\r\napp.get('/', passport.authenticate('http', {session: false}),\r\n    (req, res) => {\r\n        res.end(`Welcome to private area - ${req.user}!`);\r\n    }\r\n);\r\n```\r\n\r\n## [http-proxy](https://github.com/nodejitsu/node-http-proxy/) integration\r\n```javascript\r\n// Authentication module.\r\nvar auth = require('http-auth');\r\nvar basic = auth.basic({\r\n\trealm: \"Simon Area.\",\r\n\tfile: __dirname + \"/../data/users.htpasswd\"\r\n});\r\n\r\n// Create your proxy server.\r\nhttpProxy.createServer(basic, {\r\n    target: 'http://localhost:1338'\r\n}).listen(1337);\r\n\r\n// Create your target server.\r\nhttp.createServer((req, res) => {\r\n\tres.end(\"Request successfully proxied!\");\r\n}).listen(1338);\r\n```\r\n\r\n## Events\r\n\r\nThe auth middleware emits three types of events: **error**, **fail** and **success**. Each event passes the result object (the error in case of `fail`) and the http request `req` to the listener function.\r\n\r\n```javascript\r\n// Authentication module.\r\nvar auth = require('http-auth');\r\nvar basic = auth.basic({\r\n    realm: \"Simon Area.\",\r\n    file: __dirname + \"/../data/users.htpasswd\"\r\n});\r\n\r\nbasic.on('success', (result, req) => {\r\n\tconsole.log(`User authenticated: ${result.user}`);\r\n});\r\n\r\nbasic.on('fail', (result, req) => {\r\n\tconsole.log(`User authentication failed: ${result.user}`);\r\n});\r\n\r\nbasic.on('error', (error, req) => {\r\n\tconsole.log(`Authentication error: ${error.code + \" - \" + error.message}`);\r\n});\r\n```\r\n\r\n## Configurations\r\n\r\n - `realm` - Authentication realm, by default it is **Users**.\r\n - `file` - File where user details are stored.\r\n \t- Line format is **{user:pass}** or **{user:passHash}** for basic access. \r\n \t- Line format is **{user:realm:passHash}** for digest access.\r\n - `algorithm` - Algorithm that will be used only for **digest** access authentication.\r\n \t- **MD5** by default.\r\n \t- **MD5-sess** can be set.\r\n - `qop` - Quality of protection that is used only for **digest** access authentication.\r\n \t- **auth** is set by default.\r\n \t- **none** this option is disabling protection.\r\n - `msg401` - Message for failed authentication 401 page.\r\n - `msg407` - Message for failed authentication 407 page.\r\n - `contentType` - Content type for failed authentication page.\r\n - `skipUser` - Set this to **true**, if you don't want req.user to be filled with authentication info.\r\n\r\n## Running tests\r\n\r\nIt uses [mocha](https://mochajs.org/), so just run following command in package directory:\r\n\r\n```bash\r\n$ npm test\r\n```\r\n\r\n## Issues\r\n\r\nYou can find list of issues using **[this link](http://github.com/http-auth/http-auth/issues)**.\r\n\r\n## Questions\r\n\r\nYou can also use [stackoverflow](http://stackoverflow.com/questions/tagged/http-auth) to ask questions using **[http-auth](http://stackoverflow.com/tags/http-auth/info)** tag.\r\n\r\n## Requirements\r\n\r\n - **[Node.js](http://nodejs.org)** - Event-driven I/O server-side JavaScript environment based on V8.\r\n - **[npm](http://npmjs.org)** - Package manager. Installs, publishes and manages node programs.\r\n\r\n## Utilities\r\n\r\n - **[htpasswd](https://github.com/http-auth/htpasswd/)** - Node.js package for HTTP Basic Authentication password file utility.\r\n - **[htdigest](https://github.com/http-auth/htdigest/)** - Node.js package for HTTP Digest Authentication password file utility.\r\n\r\n## Dependencies\r\n\r\n - **[uuid](https://github.com/broofa/node-uuid/)** - Generate RFC4122(v4) UUIDs, and also non-RFC compact ids.\r\n - **[apache-md5](https://github.com/http-auth/apache-md5)** - Node.js module for Apache style password encryption using md5.\r\n - **[apache-crypt](https://github.com/http-auth/apache-crypt)** - Node.js module for Apache style password encryption using crypt(3).\r\n - **[bcrypt.js](https://github.com/dcodeIO/bcrypt.js)** - Optimized bcrypt in plain JavaScript with zero dependencies.\r\n\r\n## Development dependencies\r\n\r\n - **[mocha](https://mochajs.org/)** - simple, flexible, fun javascript test framework for node.js & the browser.\r\n - **[chai](http://chaijs.com/)** - BDD / TDD assertion framework for node.js and the browser that can be paired with any testing framework.\r\n - **[express](http://expressjs.com/)** - Sinatra inspired web development framework for node.js -- insanely fast, flexible, and simple.\r\n - **[http-proxy](https://github.com/nodejitsu/node-http-proxy/)** - A full-featured http proxy for node.js.\r\n - **[request](https://github.com/request/request/)** - Simplified HTTP request client.\r\n - **[passport](http://passportjs.org/)** - Simple, unobtrusive authentication for Node.js.\r\n - **[koa](http://koajs.com/)** - next generation web framework for node.js.\r\n - **[hapi](http://hapijs.com/)** - A rich framework for building applications and services.\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) Gevorg Harutyunyan\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/http-auth/http-auth.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "3.2.3"
}
